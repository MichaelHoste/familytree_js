// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Constants = (function() {
    function Constants() {}

    Constants.width = 90;

    Constants.height = 50;

    Constants.padding = 20;

    Constants.margin = 60;

    Constants.fontSize = 15;

    Constants.lineWidth = 2;

    Constants.verticalMargin = Constants.margin * 1.5;

    return Constants;

  })();

  this.FamilyTree = (function() {
    function FamilyTree(options) {
      var name;
      if (options == null) {
        options = {};
      }
      this.animate = bind(this.animate, this);
      this.width = options.width;
      this.height = options.height;
      this.people = options.people || [];
      this.root = options.root;
      this.saveData = options.saveData;
      this.stage = new PIXI.Container();
      if (options.serializedData) {
        this.deserialize(options.serializedData);
      }
      if (this.people.length === 0) {
        name = prompt("What's the first person's name?", 'Me');
        this.root = new Person(name, 'M');
        this.people.push(this.root);
      }
      if ($('#family-tree').length) {
        this.initializeRenderer();
        this.refreshStage();
        this.refreshMenu();
        this.bindMenu();
        this.animate();
      }
    }

    FamilyTree.prototype.initializeRenderer = function() {
      this.renderer = new PIXI.autoDetectRenderer(this.width, this.height, {
        antialias: true,
        backgroundColor: 0xFFFFFF
      });
      return $('#family-tree')[0].appendChild(this.renderer.view);
    };

    FamilyTree.prototype.initializeBackground = function() {
      this.background = PIXI.Sprite.fromImage('images/pixel.gif');
      this.background.width = this.width;
      this.background.height = this.height;
      this.stage.familyTree = this;
      this.stage.background = this.background;
      return this.stage.addChild(this.background);
    };

    FamilyTree.prototype.bindScroll = function() {
      var onDown, onMove, onUp;
      this.background.interactive = true;
      onDown = (function(_this) {
        return function(mouseData) {
          _this.isDown = true;
          _this.startX = _this.x;
          _this.startY = _this.y;
          _this.startOffsetX = mouseData.data.originalEvent.x;
          return _this.startOffsetY = mouseData.data.originalEvent.y;
        };
      })(this);
      onUp = (function(_this) {
        return function() {
          return _this.isDown = false;
        };
      })(this);
      onMove = (function(_this) {
        return function(mouseData) {
          if (_this.isDown) {
            _this.x = _this.startX + mouseData.data.originalEvent.x - _this.startOffsetX;
            _this.y = _this.startY + mouseData.data.originalEvent.y - _this.startOffsetY;
            return _this.animate();
          }
        };
      })(this);
      this.background.on('mousedown', onDown);
      this.background.on('touchstart', onDown);
      this.background.on('mouseup', onUp);
      this.background.on('touchend', onUp);
      return this.background.on('mousemove', onMove);
    };

    FamilyTree.prototype.bindMenu = function() {
      $('#family-tree-panel').on('click', 'button[data-action="add-partner"]', (function(_this) {
        return function() {
          var name, partner, suggestion;
          if (_this.root.sex === 'M') {
            suggestion = "Wife of " + _this.root.name;
          } else if (_this.root.sex === 'F') {
            suggestion = "Husband of " + _this.root.name;
          }
          name = prompt("What's the partner's name?", suggestion);
          _this.cleanTree();
          partner = _this.root.addPartner(name);
          _this.people.push(partner);
          _this.refreshStage();
          _this.refreshMenu();
          return _this.save();
        };
      })(this));
      $('#family-tree-panel').on('click', 'button[data-action="add-parents"]', (function(_this) {
        return function() {
          var father_name, father_suggestion, mother_name, mother_suggestion, parents;
          father_suggestion = "Father of " + _this.root.name;
          father_name = prompt("What's the father's name?", father_suggestion);
          mother_suggestion = "Mother of " + _this.root.name;
          mother_name = prompt("What's the mother's name?", mother_suggestion);
          _this.cleanTree();
          parents = _this.root.addParents(father_name, mother_name);
          _this.people.push(parents[0]);
          _this.people.push(parents[1]);
          _this.refreshStage();
          _this.refreshMenu();
          return _this.save();
        };
      })(this));
      $('#family-tree-panel').on('click', 'button[data-action="add-brother"]', (function(_this) {
        return function() {
          var brother, name, suggestion;
          suggestion = "Brother of " + _this.root.name;
          name = prompt("What's the brother's name?", suggestion);
          _this.cleanTree();
          brother = _this.root.addBrother(name);
          _this.people.push(brother);
          _this.refreshStage();
          _this.refreshMenu();
          return _this.save();
        };
      })(this));
      $('#family-tree-panel').on('click', 'button[data-action="add-sister"]', (function(_this) {
        return function() {
          var name, sister, suggestion;
          suggestion = "Sister of " + _this.root.name;
          name = prompt("What's the sister's name?", suggestion);
          _this.cleanTree();
          sister = _this.root.addSister(name);
          _this.people.push(sister);
          _this.refreshStage();
          _this.refreshMenu();
          return _this.save();
        };
      })(this));
      $('#family-tree-panel').on('click', 'button[data-action="add-son"]', (function(_this) {
        return function(event) {
          var name, partner, partnerUuid, son, suggestion;
          suggestion = "Son of " + _this.root.name;
          name = prompt("What's the son's name?", suggestion);
          _this.cleanTree();
          partnerUuid = $(event.target).data('with');
          partner = _.findWhere(_this.people, {
            uuid: partnerUuid
          });
          son = _this.root.relationWith(partner).addChild(name, 'M');
          _this.people.push(son);
          _this.refreshStage();
          _this.refreshMenu();
          return _this.save();
        };
      })(this));
      $('#family-tree-panel').on('click', 'button[data-action="add-daughter"]', (function(_this) {
        return function(event) {
          var daughter, name, partner, partnerUuid, suggestion;
          suggestion = "Daughter of " + _this.root.name;
          name = prompt("What's the daughter's name?", suggestion);
          _this.cleanTree();
          partnerUuid = $(event.target).data('with');
          partner = _.findWhere(_this.people, {
            uuid: partnerUuid
          });
          daughter = _this.root.relationWith(partner).addChild(name, 'F');
          _this.people.push(daughter);
          _this.refreshStage();
          _this.refreshMenu();
          return _this.save();
        };
      })(this));
      return $('#family-tree-panel').on('click', 'button[data-action="remove"]', (function(_this) {
        return function(event) {
          var j, len, name, partnerRelation, ref;
          _this.cleanTree();
          _this.people = _.without(_this.people, _this.root);
          if (_this.root.parents().length === 0) {
            ref = _this.root.partnerRelations;
            for (j = 0, len = ref.length; j < len; j++) {
              partnerRelation = ref[j];
              if (_this.root.sex === 'F') {
                partnerRelation.husband.partnerRelations = _.without(partnerRelation.husband.partnerRelations, partnerRelation);
              } else if (_this.root.sex === 'M') {
                partnerRelation.wife.partnerRelations = _.without(partnerRelation.wife.partnerRelations, partnerRelation);
              }
            }
          } else if (_this.root.children().length === 0) {
            _this.root.parentRelation.children = _.without(_this.root.parentRelation.children, _this.root);
          }
          if (_this.people.length) {
            if (_this.root.parentRelation) {
              _this.root = _this.root.father();
            } else {
              if (_this.root.sex === 'M') {
                _this.root = _this.root.partnerRelations[0].wife;
              } else if (_this.root.sex === 'F') {
                _this.root = _this.root.partnerRelations[0].husband;
              }
            }
          } else {
            name = prompt("What's the first person's name?", 'Me');
            _this.root = new Person(name, 'M');
            _this.people.push(_this.root);
          }
          _this.refreshStage();
          _this.refreshMenu();
          return _this.save();
        };
      })(this));
    };

    FamilyTree.prototype.relations = function() {
      var j, k, len, len1, partnerRelation, person, ref, ref1, relations;
      relations = [];
      ref = this.people;
      for (j = 0, len = ref.length; j < len; j++) {
        person = ref[j];
        ref1 = person.partnerRelations;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          partnerRelation = ref1[k];
          relations.push(partnerRelation);
        }
      }
      return _.uniq(relations, function(relation) {
        return relation.uuid;
      });
    };

    FamilyTree.prototype.initializeNodesAndRelations = function() {
      var j, k, len, len1, node, person, ref, ref1, relation, results;
      ref = this.relations();
      for (j = 0, len = ref.length; j < len; j++) {
        relation = ref[j];
        if (relation.node === void 0) {
          new RelationNode(this.stage, relation);
        } else {
          relation.node.initializeLines();
        }
      }
      ref1 = this.people;
      results = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        person = ref1[k];
        node = new PersonNode(this.stage, person);
        if (person.uuid === this.root.uuid) {
          this.root = person;
          results.push(this.rootNode = node);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    FamilyTree.prototype.refreshStage = function() {
      console.log(this.stage.children.length);
      while (this.stage.children.length > 0) {
        this.stage.removeChild(this.stage.children[0]);
      }
      console.log(this.stage.children.length);
      this.initializeBackground();
      this.bindScroll();
      this.initializeNodesAndRelations();
      return this.animate();
    };

    FamilyTree.prototype.refreshMenu = function() {
      var j, len, partner, ref;
      $("#family-tree-panel div").empty();
      $('#family-tree-panel div').append('<button type="button" class="btn btn-default" data-action="add-partner">Add Partner</button>');
      if (this.root.parentRelation) {
        $('#family-tree-panel div').append('<button type="button" class="btn btn-default" data-action="add-brother">Add Brother</button>');
        $('#family-tree-panel div').append('<button type="button" class="btn btn-default" data-action="add-sister">Add Sister</button>');
      }
      if (!this.root.parentRelation) {
        $('#family-tree-panel div').append('<button type="button" class="btn btn-default" data-action="add-parents">Add Parents</button>');
      }
      ref = this.root.partners();
      for (j = 0, len = ref.length; j < len; j++) {
        partner = ref[j];
        $('#family-tree-panel div').append("<button type=\"button\" class=\"btn btn-default\" data-action=\"add-son\"      data-with=\"" + partner.uuid + "\">Add son with " + partner.name + "</button>");
        $('#family-tree-panel div').append("<button type=\"button\" class=\"btn btn-default\" data-action=\"add-daughter\" data-with=\"" + partner.uuid + "\">Add daughter with " + partner.name + "</button>");
      }
      if (!this.root.partnerRelations.length || this.root.children().length === 0) {
        return $('#family-tree-panel div').append("<button type=\"button\" class=\"btn btn-default\" data-action=\"remove\">Remove</button>");
      }
    };

    FamilyTree.prototype.cleanTree = function() {
      var j, len, partnerRelation, person, ref, results;
      ref = this.people;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        person = ref[j];
        person.node.hideRectangle();
        person.node.hideVLine();
        results.push((function() {
          var k, len1, ref1, results1;
          ref1 = person.partnerRelations;
          results1 = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            partnerRelation = ref1[k];
            results1.push(partnerRelation.node.hideLines());
          }
          return results1;
        })());
      }
      return results;
    };

    FamilyTree.prototype.serialize = function() {
      var j, k, len, len1, partnerRelation, people, person, ref, ref1, relations, serialization;
      people = [];
      relations = [];
      ref = this.people;
      for (j = 0, len = ref.length; j < len; j++) {
        person = ref[j];
        people.push({
          uuid: person.uuid,
          name: person.name,
          sex: person.sex
        });
        ref1 = person.partnerRelations;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          partnerRelation = ref1[k];
          relations.push({
            uuid: partnerRelation.uuid,
            children: _.map(partnerRelation.children, function(child) {
              return child.uuid;
            }),
            husband: partnerRelation.husband.uuid,
            wife: partnerRelation.wife.uuid
          });
        }
      }
      return serialization = {
        people: people,
        relations: _.uniq(relations, function(relation) {
          return relation.uuid;
        }),
        root: this.root.uuid
      };
    };

    FamilyTree.prototype.deserialize = function(serialization) {
      var child, husband, j, k, l, len, len1, len2, len3, m, person, ref, ref1, relation, sC, sP, sR, serializedPeople, serializedRelations, serializedRoot, wife;
      ref = this.stage.children;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        this.stage.removeChild(child);
      }
      serializedPeople = serialization.people;
      serializedRelations = serialization.relations;
      serializedRoot = serialization.root;
      this.people = [];
      for (k = 0, len1 = serializedPeople.length; k < len1; k++) {
        sP = serializedPeople[k];
        person = new Person(sP.name, sP.sex, sP.uuid);
        this.people.push(person);
      }
      for (l = 0, len2 = serializedRelations.length; l < len2; l++) {
        sR = serializedRelations[l];
        relation = new Relation(sR.uuid);
        husband = _.findWhere(this.people, {
          uuid: sR.husband
        });
        relation.husband = husband;
        husband.partnerRelations.push(relation);
        wife = _.findWhere(this.people, {
          uuid: sR.wife
        });
        relation.wife = wife;
        wife.partnerRelations.push(relation);
        ref1 = sR.children;
        for (m = 0, len3 = ref1.length; m < len3; m++) {
          sC = ref1[m];
          child = _.findWhere(this.people, {
            uuid: sC
          });
          child.parentRelation = relation;
          relation.children.push(child);
        }
      }
      this.root = _.findWhere(this.people, {
        uuid: serializedRoot
      });
      if (this.renderer) {
        return this.refreshStage();
      }
    };

    FamilyTree.prototype.save = function() {
      if (this.saveData) {
        return this.saveData(this.serialize());
      }
    };

    FamilyTree.prototype.loadData = function(data) {
      return this.deserialize(serializedData);
    };

    FamilyTree.prototype.animate = function() {
      if (this.x === void 0) {
        this.x = this.width / 2;
      }
      if (this.y === void 0) {
        this.y = this.height / 2;
      }
      this.rootNode.displayTree(this.x, this.y);
      return this.renderer.render(this.stage);
    };

    return FamilyTree;

  })();

  this.Person = (function() {
    function Person(name, sex, uuid) {
      if (uuid == null) {
        uuid = void 0;
      }
      this.name = name;
      this.sex = sex;
      this.parentRelation = void 0;
      this.partnerRelations = [];
      this.uuid = uuid ? uuid : window.uuid();
    }

    Person.prototype.partners = function() {
      return _.collect(this.partnerRelations, (function(_this) {
        return function(relation) {
          return relation[_this.sex === 'M' ? 'wife' : 'husband'];
        };
      })(this));
    };

    Person.prototype.children = function() {
      return _.flatten(_.collect(this.partnerRelations, function(partnerRelation) {
        return partnerRelation.children;
      }));
    };

    Person.prototype.mother = function() {
      if (this.parentRelation) {
        return this.parentRelation.wife;
      }
    };

    Person.prototype.father = function() {
      if (this.parentRelation) {
        return this.parentRelation.husband;
      }
    };

    Person.prototype.parents = function() {
      return _.compact([this.father(), this.mother()]);
    };

    Person.prototype.grandparents = function() {
      return this.father().parents().concat(this.mother().parents());
    };

    Person.prototype.siblings = function() {
      return _.difference(this.parentRelation.children, [this]);
    };

    Person.prototype.niblings = function() {
      return _.flatten(_.collect(this.siblings(), function(sibling) {
        return sibling.children();
      }));
    };

    Person.prototype.parentsSiblings = function() {
      return this.father().siblings().concat(this.mother().siblings());
    };

    Person.prototype.cousins = function() {
      return _.flatten(_.collect(this.parentsSiblings(), function(sibling) {
        return sibling.children();
      }));
    };

    Person.prototype.relationWith = function(person) {
      return _.find(this.partnerRelations, (function(_this) {
        return function(relation) {
          return (_this.sex === 'M' && relation.wife === person) || (_this.sex === 'F' && relation.husband === person);
        };
      })(this));
    };

    Person.prototype.addParents = function(fatherName, motherName) {
      if (fatherName == null) {
        fatherName = void 0;
      }
      if (motherName == null) {
        motherName = void 0;
      }
      fatherName = fatherName ? fatherName : "Father of " + this.name;
      motherName = motherName ? motherName : "Mother of " + this.name;
      this.parentRelation = new Relation();
      this.parentRelation.children.push(this);
      this.parentRelation.husband = new Person(fatherName, 'M');
      this.parentRelation.wife = new Person(motherName, 'F');
      this.parentRelation.husband.partnerRelations.push(this.parentRelation);
      this.parentRelation.wife.partnerRelations.push(this.parentRelation);
      return [this.parentRelation.husband, this.parentRelation.wife];
    };

    Person.prototype.addBrother = function(name) {
      if (name == null) {
        name = void 0;
      }
      name = name ? name : "Brother of " + this.name;
      if (this.parentRelation) {
        return this.parentRelation.addChild(name, 'M');
      } else {
        return void 0;
      }
    };

    Person.prototype.addSister = function(name) {
      if (name == null) {
        name = void 0;
      }
      name = name ? name : "Sister of " + this.name;
      if (this.parentRelation) {
        return this.parentRelation.addChild(name, 'F');
      } else {
        return void 0;
      }
    };

    Person.prototype.addPartner = function(name) {
      var husbandName, relation, wifeName;
      if (name == null) {
        name = void 0;
      }
      relation = new Relation();
      if (this.sex === 'M') {
        relation.husband = this;
        wifeName = name ? name : "Wife of " + this.name;
        relation.wife = new Person(wifeName, 'F');
        relation.wife.partnerRelations.push(relation);
        this.partnerRelations.push(relation);
        return relation.wife;
      } else {
        relation.wife = this;
        husbandName = name ? name : "Husband of " + this.name;
        relation.husband = new Person(husbandName, 'M');
        relation.husband.partnerRelations.push(relation);
        this.partnerRelations.push(relation);
        return relation.husband;
      }
    };

    return Person;

  })();

  this.PersonNode = (function() {
    function PersonNode(stage, person) {
      this.stage = stage;
      this.person = person;
      this.root = false;
      this.x = 0;
      this.y = 0;
      this.person.node = this;
      this.initializeVLine();
      this.initializeRectangle();
      this.initializeText();
      this.bindRectangle();
    }

    PersonNode.prototype.initializeRectangle = function() {
      var color;
      color = this.person.sex === 'M' ? 0xB4D8E7 : 0xFFC0CB;
      this.graphics = new PIXI.Graphics();
      this.graphics.lineStyle(Constants.lineWidth, 0x333333, 1);
      this.graphics.beginFill(color);
      if (this.person.sex === 'M') {
        this.drawRectangle();
      } else {
        this.drawRoundRectangle();
      }
      return this.stage.addChild(this.graphics);
    };

    PersonNode.prototype.initializeText = function() {
      this.text = new PIXI.Text(this.person.name, {
        font: Constants.fontSize + "px Arial",
        fill: 0x222222,
        align: 'center',
        wordWrap: true,
        wordWrapWidth: Constants.width - Constants.padding / 2
      });
      this.text.anchor.x = 0.5;
      this.text.anchor.y = 0.5;
      return this.stage.addChild(this.text);
    };

    PersonNode.prototype.initializeVLine = function() {
      if (this.person.parentRelation) {
        this.vLine = new PIXI.Graphics();
        this.vLine.lineStyle(Constants.lineWidth, 0x333333, 1);
        this.vLine.moveTo(0, 0);
        this.vLine.lineTo(0, -Constants.verticalMargin / 2);
        return this.stage.addChild(this.vLine);
      }
    };

    PersonNode.prototype.drawRectangle = function() {
      return this.graphics.drawRect(-Constants.width / 2, -Constants.height / 2, Constants.width, Constants.height);
    };

    PersonNode.prototype.drawRoundRectangle = function() {
      return this.graphics.drawRoundedRect(-Constants.width / 2, -Constants.height / 2, Constants.width, Constants.height, Constants.height / 4);
    };

    PersonNode.prototype.bindRectangle = function() {
      this.graphics.interactive = true;
      this.graphics.on('mouseover', (function(_this) {
        return function() {
          return $('#family-tree').css('cursor', 'pointer');
        };
      })(this));
      this.graphics.on('mouseout', (function(_this) {
        return function() {
          return $('#family-tree').css('cursor', 'default');
        };
      })(this));
      this.graphics.on('mousedown', this.stage.background._events.mousedown.fn);
      this.graphics.on('touchstart', this.stage.background._events.touchstart.fn);
      this.graphics.on('mouseup', this.stage.background._events.mouseup.fn);
      this.graphics.on('touchend', this.stage.background._events.touchend.fn);
      return this.graphics.on('click', (function(_this) {
        return function(mouseData) {
          var event, familyTree, moveX, moveY;
          event = mouseData.data.originalEvent;
          familyTree = _this.stage.familyTree;
          moveX = Math.abs(familyTree.startOffsetX - event.x);
          moveY = Math.abs(familyTree.startOffsetY - event.y);
          if (moveX + moveY < 10) {
            familyTree.rootNode.root = false;
            familyTree.rootNode = _this;
            familyTree.root = _this.person;
            familyTree.refreshMenu();
            familyTree.cleanTree();
            familyTree.x = familyTree.width / 2;
            familyTree.y = familyTree.height / 2;
            _this.displayTree(familyTree.x, familyTree.y);
            return familyTree.animate();
          }
        };
      })(this));
    };

    PersonNode.prototype.setPosition = function(x, y, apply) {
      if (apply == null) {
        apply = true;
      }
      this.x = x;
      this.y = y;
      if (apply) {
        this.graphics.position.x = x;
        this.graphics.position.y = y;
        this.text.position.x = x;
        this.text.position.y = y;
        if (this.person.parentRelation) {
          this.vLine.position.x = x;
          return this.vLine.position.y = y - Constants.height / 2;
        }
      }
    };

    PersonNode.prototype.leftMostNode = function() {
      var partner, partnerType, xArray;
      if (this.person.partnerRelations.length) {
        xArray = _.collect(this.person.partnerRelations[0].children, function(child) {
          return child.node.leftMostNode();
        });
        partnerType = this.person.sex === 'M' ? 'wife' : 'husband';
        partner = this.person.partnerRelations[0][partnerType];
        xArray.push(partner.node.x);
      } else {
        xArray = [];
      }
      xArray.push(this.x);
      return _.min(xArray);
    };

    PersonNode.prototype.rightMostNode = function() {
      var partner, partnerType, xArray;
      if (this.person.partnerRelations.length) {
        xArray = _.collect(this.person.partnerRelations[0].children, function(child) {
          return child.node.rightMostNode();
        });
        partnerType = this.person.sex === 'M' ? 'wife' : 'husband';
        partner = this.person.partnerRelations[0][partnerType];
        xArray.push(partner.node.x);
      } else {
        xArray = [];
      }
      xArray.push(this.x);
      return _.max(xArray);
    };

    PersonNode.prototype.size = function() {
      return this.rightMostNode() - this.leftMostNode() + Constants.width;
    };

    PersonNode.prototype.hideRectangle = function() {
      this.graphics.position.x = -1000;
      this.graphics.position.y = -1000;
      this.text.position.x = -1000;
      return this.text.position.y = -1000;
    };

    PersonNode.prototype.hideVLine = function() {
      if (this.vLine) {
        this.vLine.position.x = -1000;
      }
      if (this.vLine) {
        return this.vLine.position.y = -1000;
      }
    };

    PersonNode.prototype.displayTree = function(x, y) {
      this.root = true;
      this.setPosition(x, y);
      this.updateBottomPeople();
      return this.updateTopPeople();
    };

    PersonNode.prototype.updateBottomPeople = function() {
      this.updatePartnerPositions();
      this.drawRelationLines();
      this.updateChildrenPositions();
      this.drawHorizontalLineBetweenChildren();
      return this.drawRelationTopVerticalLine();
    };

    PersonNode.prototype.updateTopPeople = function(align) {
      var y;
      if (align == null) {
        align = 'center';
      }
      if (this.person.parentRelation) {
        y = this.y - Constants.verticalMargin - Constants.height / 2;
        this.updateSiblingsPositions(align);
        this.updateParentsPosition(y, align);
        this.drawParentsHLine(y);
        this.updateParentsVLinePosition();
        return this.drawSiblingsHLine(y);
      }
    };

    PersonNode.prototype.updatePartnerPositions = function() {
      var distance, i, j, len, offset, partnerRelation, ref, results;
      distance = 0;
      ref = this.person.partnerRelations;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        partnerRelation = ref[i];
        if (i === 0) {
          offset = Constants.width + Constants.margin;
          if (this.person.sex === 'M') {
            results.push(partnerRelation.wife.node.setPosition(this.x + offset, this.y));
          } else if (this.person.sex === 'F') {
            results.push(partnerRelation.husband.node.setPosition(this.x - offset, this.y));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    PersonNode.prototype.drawRelationLines = function() {
      var husbandsX, j, len, maxX, minX, partnerRelation, ref, results, wivesX;
      if (this.person.partnerRelations.length) {
        husbandsX = _.collect([this.person.partnerRelations[0]], function(p) {
          return p.husband.node.x;
        });
        wivesX = _.collect([this.person.partnerRelations[0]], function(p) {
          return p.wife.node.x;
        });
        minX = _.min(husbandsX.concat(wivesX), function(value) {
          return value;
        });
        maxX = _.max(husbandsX.concat(wivesX), function(value) {
          return value;
        });
        ref = this.person.partnerRelations;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          partnerRelation = ref[j];
          partnerRelation.node.setHLine(minX, maxX, this.y);
          results.push(partnerRelation.node.drawHLine());
        }
        return results;
      }
    };

    PersonNode.prototype.updateChildrenPositions = function() {
      var child, children, childrenSize, husband, i, j, len, offset, partnerRelation, ref, results, start, wife;
      ref = this.person.partnerRelations;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        partnerRelation = ref[i];
        if (i === 0) {
          husband = partnerRelation.husband;
          wife = partnerRelation.wife;
          children = partnerRelation.children;
          start = (husband.node.x + wife.node.x) / 2;
          if (children.length > 1) {
            childrenSize = partnerRelation.node.globalWidth();
            start = start - childrenSize / 2 + Constants.width / 2;
          }
          results.push((function() {
            var k, len1, results1;
            results1 = [];
            for (i = k = 0, len1 = children.length; k < len1; i = ++k) {
              child = children[i];
              offset = child.node.x - child.node.leftMostNode();
              child.node.setPosition(start + offset, this.y + Constants.height / 2 + Constants.verticalMargin);
              child.node.updateBottomPeople();
              if (child.partnerRelations.length) {
                results1.push(start = start + child.partnerRelations[0].node.globalWidth() + Constants.margin);
              } else {
                results1.push(start = start + Constants.width + Constants.margin);
              }
            }
            return results1;
          }).call(this));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    PersonNode.prototype.drawHorizontalLineBetweenChildren = function() {
      var children, i, j, len, partnerRelation, ref, results;
      ref = this.person.partnerRelations;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        partnerRelation = ref[i];
        if (i === 0) {
          children = partnerRelation.children;
          if (children.length > 1) {
            partnerRelation.node.childrenHLineStartX = children[0].node.x;
            partnerRelation.node.childrenHLineEndX = _.last(children).node.x;
            partnerRelation.node.childrenHLineY = this.y + Constants.verticalMargin / 2;
            results.push(partnerRelation.node.drawChildrenHLine());
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    PersonNode.prototype.drawRelationTopVerticalLine = function() {
      var children, endX, i, j, len, partnerRelation, ref, results, startX;
      ref = this.person.partnerRelations;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        partnerRelation = ref[i];
        if (i === 0) {
          children = partnerRelation.children;
          if (children.length) {
            startX = partnerRelation.husband.node.x;
            endX = partnerRelation.wife.node.x;
            partnerRelation.node.vLine.position.x = (startX + endX) / 2;
            results.push(partnerRelation.node.vLine.position.y = this.y + Constants.verticalMargin / 4);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    PersonNode.prototype.updateSiblingsPositions = function(align) {
      var child, children, childrenLeftDistance, childrenRightDistance, i, j, k, l, leftDistance, len, offset, personIndex, ref, ref1, ref2, results, rightDistance, startIndex;
      if (align == null) {
        align = 'center';
      }
      children = this.person.parentRelation.children;
      personIndex = _.findIndex(children, this.person);
      for (i = j = 0, len = children.length; j < len; i = ++j) {
        child = children[i];
        if (i !== personIndex) {
          child.node.setPosition(this.x - 1000, this.y);
          child.node.updateBottomPeople();
        }
      }
      if (align === 'center' || align === 'left') {
        leftDistance = this.x - this.leftMostNode() + Constants.width / 2;
        offset = 0;
        startIndex = align === 'center' ? personIndex : children.length - 1;
        for (i = k = ref = startIndex; ref <= 0 ? k <= 0 : k >= 0; i = ref <= 0 ? ++k : --k) {
          if (i !== personIndex) {
            child = children[i];
            childrenRightDistance = child.node.rightMostNode() - child.node.x + Constants.width / 2;
            child.node.setPosition(this.x - (leftDistance + childrenRightDistance + Constants.margin + offset), this.y);
            child.node.updateBottomPeople();
            offset = offset + child.node.size() + Constants.margin;
          }
        }
      }
      if (align === 'center' || align === 'right') {
        rightDistance = this.rightMostNode() - this.x + Constants.width / 2;
        offset = 0;
        startIndex = align === 'center' ? personIndex : 0;
        results = [];
        for (i = l = ref1 = startIndex, ref2 = children.length - 1; ref1 <= ref2 ? l <= ref2 : l >= ref2; i = ref1 <= ref2 ? ++l : --l) {
          if (i !== personIndex) {
            child = children[i];
            childrenLeftDistance = child.node.x - child.node.leftMostNode() + Constants.width / 2;
            child.node.setPosition(this.x + (rightDistance + childrenLeftDistance + Constants.margin + offset), this.y);
            child.node.updateBottomPeople();
            results.push(offset = offset + child.node.size() + Constants.margin);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    PersonNode.prototype.updateParentsPosition = function(y, align) {
      var center, father, left, mother, right;
      if (align == null) {
        align = 'center';
      }
      father = this.person.parentRelation.husband;
      mother = this.person.parentRelation.wife;
      if (this.person.siblings().length === 0) {
        center = this.x;
      } else {
        right = father.node.rightMostNode();
        left = father.node.leftMostNode();
        center = left + (right - left) / 2;
      }
      if (align === 'left') {
        center = center - Constants.margin / 2 - Constants.width / 2;
      } else if (align === 'right') {
        center = center + Constants.margin / 2 + Constants.width / 2;
      }
      father.node.setPosition(center - Constants.margin / 2 - Constants.width / 2, y);
      mother.node.setPosition(center + Constants.margin / 2 + Constants.width / 2, y);
      if (father.parentRelation && mother.parentRelation) {
        father.node.updateTopPeople('left');
        return mother.node.updateTopPeople('right');
      } else {
        father.node.updateTopPeople('center');
        return mother.node.updateTopPeople('center');
      }
    };

    PersonNode.prototype.drawParentsHLine = function(y) {
      var husband, parentRelationNode, wife;
      parentRelationNode = this.person.parentRelation.node;
      husband = this.person.parentRelation.husband;
      wife = this.person.parentRelation.wife;
      parentRelationNode.hLineStartX = husband.node.x + Constants.width / 2;
      parentRelationNode.hLineEndX = wife.node.x - Constants.width / 2;
      parentRelationNode.hLineY = y;
      return parentRelationNode.drawHLine();
    };

    PersonNode.prototype.updateParentsVLinePosition = function() {
      var husband, parentRelationNode, wife;
      husband = this.person.parentRelation.husband;
      wife = this.person.parentRelation.wife;
      parentRelationNode = this.person.parentRelation.node;
      parentRelationNode.vLine.position.x = (husband.node.x + wife.node.x) / 2;
      return parentRelationNode.vLine.position.y = husband.node.y + Constants.verticalMargin / 4;
    };

    PersonNode.prototype.drawSiblingsHLine = function(y) {
      var children, parentRelationNode;
      parentRelationNode = this.person.parentRelation.node;
      children = this.person.parentRelation.children;
      parentRelationNode.childrenHLineY = y + Constants.verticalMargin / 2;
      parentRelationNode.childrenHLineStartX = _.min(children, function(child) {
        return child.node.x;
      }).node.x;
      parentRelationNode.childrenHLineEndX = _.max(children, function(child) {
        return child.node.x;
      }).node.x;
      if (this.person.sex === 'F') {
        parentRelationNode.childrenHLineEndX = Math.max(parentRelationNode.childrenHLineEndX, parentRelationNode.vLine.position.x);
      } else if (this.person.sex === 'M') {
        parentRelationNode.childrenHLineStartX = Math.min(parentRelationNode.childrenHLineStartX, parentRelationNode.vLine.position.x);
      }
      return parentRelationNode.drawChildrenHLine();
    };

    return PersonNode;

  })();

  this.Relation = (function() {
    function Relation(uuid) {
      if (uuid == null) {
        uuid = void 0;
      }
      this.husband = void 0;
      this.wife = void 0;
      this.children = [];
      this.uuid = uuid ? uuid : window.uuid();
    }

    Relation.prototype.addChild = function(name, sex) {
      var child;
      child = new Person(name, sex);
      child.parentRelation = this;
      this.children.push(child);
      return child;
    };

    return Relation;

  })();

  this.RelationNode = (function() {
    function RelationNode(stage, relation) {
      this.stage = stage;
      this.relation = relation;
      this.relation.node = this;
      this.initializeLines();
    }

    RelationNode.prototype.initializeLines = function() {
      this.initializeHLine();
      this.initializeVLine();
      return this.initializeChildrenHLine();
    };

    RelationNode.prototype.initializeHLine = function() {
      this.hLineStartX = 0;
      this.hLineEndX = 0;
      this.hLineY = 0;
      this.hLine = new PIXI.Graphics();
      return this.stage.addChild(this.hLine);
    };

    RelationNode.prototype.initializeChildrenHLine = function() {
      this.childrenHLineStartX = 0;
      this.childrenHLineEndX = 0;
      this.childrenHLineY = 0;
      this.childrenHLine = new PIXI.Graphics();
      return this.stage.addChild(this.childrenHLine);
    };

    RelationNode.prototype.initializeVLine = function() {
      this.vLine = new PIXI.Graphics();
      this.vLine.lineStyle(Constants.lineWidth, 0x333333, 1);
      this.vLine.moveTo(0, -Constants.verticalMargin / 4);
      this.vLine.lineTo(0, Constants.verticalMargin / 4);
      return this.stage.addChild(this.vLine);
    };

    RelationNode.prototype.globalWidth = function() {
      return Math.max(this.relationWidth(), this.childrenWidth());
    };

    RelationNode.prototype.relationWidth = function() {
      return 2 * Constants.width + Constants.margin;
    };

    RelationNode.prototype.childrenWidth = function() {
      var child, j, k, len, len1, partnerRelation, ref, ref1, size;
      size = 0;
      ref = this.relation.children;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        if (child.partnerRelations.length > 0) {
          size += Constants.width;
          ref1 = child.partnerRelations;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            partnerRelation = ref1[k];
            size += partnerRelation.node.globalWidth() - Constants.width;
          }
        } else {
          size += Constants.width;
        }
        size += Constants.margin;
      }
      if (this.relation.children.length > 0) {
        size -= Constants.margin;
      }
      return size;
    };

    RelationNode.prototype.hideLines = function() {
      this.hLineStartX = 0;
      this.hLineEndX = 0;
      this.drawHLine();
      this.childrenHLineStartX = 0;
      this.childrenHLineEndX = 0;
      this.drawChildrenHLine();
      this.vLine.position.x = -1000;
      return this.vLine.position.y = -1000;
    };

    RelationNode.prototype.setHLine = function(startX, endX, y) {
      this.hLineStartX = startX;
      this.hLineEndX = endX;
      return this.hLineY = y;
    };

    RelationNode.prototype.drawHLine = function() {
      this.hLine.clear();
      this.hLine.lineStyle(Constants.lineWidth, 0x333333, 1);
      this.hLine.moveTo(this.hLineStartX, this.hLineY);
      this.hLine.lineTo(this.hLineEndX, this.hLineY);
      return false;
    };

    RelationNode.prototype.drawChildrenHLine = function() {
      this.childrenHLine.clear();
      this.childrenHLine.lineStyle(Constants.lineWidth, 0x333333, 1);
      this.childrenHLine.moveTo(this.childrenHLineStartX, this.childrenHLineY);
      this.childrenHLine.lineTo(this.childrenHLineEndX, this.childrenHLineY);
      return false;
    };

    return RelationNode;

  })();

  $(function() {
    var abraham, bart, clancy, fatherOfLing, herb, homer, jackie, ling, lisa, maggie, marge, mona, patty, ref, ref1, selma;
    homer = new Person('Homer', 'M');
    marge = homer.addPartner('Marge');
    bart = homer.relationWith(marge).addChild('Bart', 'M');
    lisa = homer.relationWith(marge).addChild('Lisa', 'F');
    maggie = homer.relationWith(marge).addChild('Maggie', 'F');
    ref = homer.addParents('Abraham', 'Mona'), abraham = ref[0], mona = ref[1];
    ref1 = marge.addParents('Clancy', 'Jackie'), clancy = ref1[0], jackie = ref1[1];
    herb = abraham.relationWith(mona).addChild('Herb', 'M');
    patty = clancy.relationWith(jackie).addChild('Patty', 'F');
    selma = clancy.relationWith(jackie).addChild('Selma', 'F');
    fatherOfLing = selma.addPartner('Father of Ling');
    return ling = selma.relationWith(fatherOfLing).addChild('Ling', 'F');
  });

  window.uuid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };

}).call(this);
