// Generated by CoffeeScript 1.6.3
(function() {
  var Constants, Person, PersonNode, Relation, RelationNode;

  Constants = (function() {
    function Constants() {}

    Constants.height = 40;

    Constants.fontSize = 15;

    Constants.padding = 20;

    Constants.margin = 40;

    Constants.lineWidth = 2;

    return Constants;

  })();

  $(function() {
    var animate, bart, bartNode, homer, homerMargeNode, homerNode, homerSelmaNode, marge, margeNode, renderer, rootNode, selma, selmaNode, stage;
    renderer = new PIXI.autoDetectRenderer(1024, 768, {
      antialias: true,
      backgroundColor: 0xFFFFFF
    });
    $('#content')[0].appendChild(renderer.view);
    stage = new PIXI.Container();
    homer = new Person('Homer', 'M');
    marge = homer.addPartner('Marge Bouvier');
    bart = homer.relationWith(marge).addChild('Bart', 'M');
    selma = homer.addPartner('Selma Bouvier');
    homerNode = new PersonNode(stage, homer);
    margeNode = new PersonNode(stage, marge);
    selmaNode = new PersonNode(stage, selma);
    bartNode = new PersonNode(stage, bart);
    homerMargeNode = new RelationNode(stage, homer.relationWith(marge));
    homerSelmaNode = new RelationNode(stage, homer.relationWith(selma));
    rootNode = homerNode;
    rootNode.displayTree(400, 384);
    animate = function() {
      requestAnimationFrame(animate);
      rootNode.update();
      return renderer.render(stage);
    };
    return animate();
  });

  Person = (function() {
    function Person(name, sex) {
      this.name = name;
      this.sex = sex;
      this.parentRelation = void 0;
      this.partnerRelations = [];
    }

    Person.prototype.partners = function() {
      var _this = this;
      return _.collect(this.partnerRelations, function(relation) {
        return relation[_this.sex === 'M' ? 'wife' : 'husband'];
      });
    };

    Person.prototype.children = function() {
      return _.flatten(_.collect(this.partnerRelations, function(partnerRelation) {
        return partnerRelation.children;
      }));
    };

    Person.prototype.mother = function() {
      if (this.parentRelation) {
        return this.parentRelation.wife;
      }
    };

    Person.prototype.father = function() {
      if (this.parentRelation) {
        return this.parentRelation.husband;
      }
    };

    Person.prototype.parents = function() {
      return _.compact([this.father(), this.mother()]);
    };

    Person.prototype.grandparents = function() {
      return this.father().parents().concat(this.mother().parents());
    };

    Person.prototype.siblings = function() {
      return _.difference(this.parentRelation.children, [this]);
    };

    Person.prototype.niblings = function() {
      return _.flatten(_.collect(this.siblings(), function(sibling) {
        return sibling.children();
      }));
    };

    Person.prototype.parentsSiblings = function() {
      return this.father().siblings().concat(this.mother().siblings());
    };

    Person.prototype.cousins = function() {
      return _.flatten(_.collect(this.parentsSiblings(), function(sibling) {
        return sibling.children();
      }));
    };

    Person.prototype.relationWith = function(person) {
      var _this = this;
      return _.find(this.partnerRelations, function(relation) {
        return (_this.sex === 'M' && relation.wife === person) || (_this.sex === 'F' && relation.husband === person);
      });
    };

    Person.prototype.addParents = function(fatherName, motherName) {
      if (fatherName == null) {
        fatherName = void 0;
      }
      if (motherName == null) {
        motherName = void 0;
      }
      fatherName = fatherName ? fatherName : "Father of " + this.name;
      motherName = motherName ? motherName : "Mother of " + this.name;
      this.parentRelation = new Relation();
      this.parentRelation.children.push(this);
      this.parentRelation.husband = new Person(fatherName, 'M');
      this.parentRelation.wife = new Person(motherName, 'F');
      this.parentRelation.husband.partnerRelations.push(this.parentRelation);
      this.parentRelation.wife.partnerRelations.push(this.parentRelation);
      return [this.parentRelation.husband, this.parentRelation.wife];
    };

    Person.prototype.addPartner = function(name) {
      var husbandName, relation, wifeName;
      if (name == null) {
        name = void 0;
      }
      relation = new Relation();
      if (this.sex === 'M') {
        relation.husband = this;
        wifeName = name ? name : "Wife of " + this.name;
        relation.wife = new Person(wifeName, 'F');
        relation.wife.partnerRelations.push(relation);
        this.partnerRelations.push(relation);
        return relation.wife;
      } else {
        relation.wife = this;
        husbandName = name ? name : "Husband of " + this.name;
        relation.husband = new Person(husbandName, 'M');
        relation.husband.partnerRelations.push(relation);
        this.partnerRelations.push(relation);
        return relation.husband;
      }
    };

    return Person;

  })();

  PersonNode = (function() {
    function PersonNode(stage, person) {
      this.stage = stage;
      this.person = person;
      this.root = false;
      this.dirty_root = false;
      this.dirty_position = true;
      this.dirty_iterator = 0;
      this.person.node = this;
      this.initializeRectangle();
      this.initializeText();
    }

    PersonNode.prototype.initializeRectangle = function() {
      var color;
      color = this.person.sex === 'M' ? 0xB4D8E7 : 0xFFC0CB;
      this.graphics = new PIXI.Graphics();
      this.graphics.lineStyle(Constants.lineWidth, 0x333333, 1);
      this.graphics.beginFill(color);
      if (this.person.sex === 'M') {
        this.graphics.drawRect(0, 0, 200, Constants.height);
      } else {
        this.graphics.drawRoundedRect(0, 0, 200, Constants.height, Constants.height / 5);
      }
      this.graphics.position.x = -1000;
      this.graphics.position.y = -1000;
      return this.stage.addChild(this.graphics);
    };

    PersonNode.prototype.initializeText = function() {
      this.text = new PIXI.Text(this.person.name, {
        font: "" + Constants.fontSize + "px Arial",
        fill: 0x222222
      });
      this.text.position.x = -1000;
      this.text.position.y = -1000;
      this.text.anchor.x = 0.5;
      return this.stage.addChild(this.text);
    };

    PersonNode.prototype.displayTree = function(x, y) {
      this.root = true;
      this.dirty_root = true;
      this.dirty_iterator = 0;
      return this.setPosition(x, y);
    };

    PersonNode.prototype.width = function() {
      return this.graphics.width;
    };

    PersonNode.prototype.position = function() {
      return this.text.position;
    };

    PersonNode.prototype.setPosition = function(x, y) {
      this.text.position.x = x;
      this.text.position.y = y;
      return this.dirty_position = true;
    };

    PersonNode.prototype.update = function() {
      this.updatePosition();
      if (this.dirty_root) {
        this.updatePartnerPositions();
        this.updateRelationPositions();
        this.updateRelationChildren();
        if (this.dirty_iterator === 5) {
          this.dirty_root = false;
        }
        return this.dirty_iterator++;
      }
    };

    PersonNode.prototype.updatePosition = function() {
      if (this.dirty_position) {
        this.graphics.width = this.text.width + Constants.padding;
        this.graphics.position.x = this.text.position.x - this.text.width / 2 - Constants.padding / 2;
        this.graphics.position.y = this.text.position.y - this.text.height + 6;
        return this.dirty_position = false;
      }
    };

    PersonNode.prototype.updatePartnerPositions = function() {
      var distance, i, lastBoxWidth, partnerNode, partnerRelation, _i, _len, _ref, _results;
      distance = 0;
      lastBoxWidth = this.width();
      _ref = this.person.partnerRelations;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        partnerRelation = _ref[i];
        if (this.person.sex === 'M') {
          partnerNode = partnerRelation.wife.node;
          distance = distance + partnerRelation.node.lineWidth() + lastBoxWidth / 2 + partnerNode.width() / 2;
        } else {
          partnerNode = partnerRelation.husband.node;
          distance = distance - partnerRelation.node.lineWidth() - lastBoxWidth / 2 - partnerNode.width() / 2;
        }
        lastBoxWidth = partnerNode.width();
        partnerNode.setPosition(this.text.position.x + distance, this.text.position.y);
        _results.push(partnerNode.update());
      }
      return _results;
    };

    PersonNode.prototype.updateRelationPositions = function() {
      var distance, endX, endY, i, lineWidth, partnerRelation, startX, startY, _i, _len, _ref, _results;
      startY = endY = this.graphics.position.y + Constants.height / 2;
      if (this.person.sex === 'M') {
        distance = this.text.position.x + this.width() / 2;
      } else if (this.person.sex === 'F') {
        distance = this.text.position.x - this.width() / 2;
      }
      _ref = this.person.partnerRelations;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        partnerRelation = _ref[i];
        lineWidth = partnerRelation.node.lineWidth();
        if (this.person.sex === 'M') {
          if (i !== 0) {
            distance = distance + lineWidth + partnerRelation.wife.node.width();
          }
          startX = distance - Constants.lineWidth / 2;
          endX = distance + lineWidth;
        } else if (this.person.sex === 'F') {
          if (i !== 0) {
            distance = distance - lineWidth - partnerRelation.wife.node.width();
          }
          startX = distance + Constants.lineWidth / 2;
          endX = distance - lineWidth;
        }
        _results.push(partnerRelation.node.drawLine({
          x: startX,
          y: startY
        }, {
          x: endX,
          y: endY
        }));
      }
      return _results;
    };

    PersonNode.prototype.updateRelationChildren = function() {
      return false;
    };

    return PersonNode;

  })();

  Relation = (function() {
    function Relation() {
      this.husband = void 0;
      this.wife = void 0;
      this.children = [];
    }

    Relation.prototype.addChild = function(name, sex) {
      var child;
      child = new Person(name, sex);
      child.parentRelation = this;
      this.children.push(child);
      return child;
    };

    return Relation;

  })();

  RelationNode = (function() {
    function RelationNode(stage, relation) {
      this.stage = stage;
      this.relation = relation;
      this.dirty = true;
      this.relation.node = this;
      this.initializeLine();
    }

    RelationNode.prototype.initializeLine = function() {
      this.graphics = new PIXI.Graphics();
      return this.stage.addChild(this.graphics);
    };

    RelationNode.prototype.globalWidth = function() {
      return Math.max(this.relationWidth(), this.childrenWidth());
    };

    RelationNode.prototype.lineWidth = function() {
      return this.globalWidth() - this.relation.husband.node.width() - this.relation.wife.node.width();
    };

    RelationNode.prototype.relationWidth = function() {
      var size;
      size = this.relation.husband.node.width();
      size += this.relation.wife.node.width();
      size += Constants.margin;
      return size;
    };

    RelationNode.prototype.childrenWidth = function() {
      var child, size, _i, _len, _ref;
      size = 0;
      _ref = this.relation.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        size += child.node.width();
        size += Constants.margin;
      }
      if (this.relation.children.length > 0) {
        size -= Constants.margin;
      }
      return size;
    };

    RelationNode.prototype.drawLine = function(from, to) {
      this.graphics.clear;
      this.graphics.lineStyle(Constants.lineWidth, 0x333333, 1);
      this.graphics.moveTo(from.x, from.y);
      this.graphics.lineTo(to.x, to.y);
      return false;
    };

    return RelationNode;

  })();

  $(function() {
    var abraham, bart, clancy, fatherOfLing, herb, homer, jackie, ling, lisa, maggie, marge, mona, patty, selma, _ref, _ref1;
    homer = new Person('Homer', 'M');
    marge = homer.addPartner('Marge');
    bart = homer.relationWith(marge).addChild('Bart', 'M');
    lisa = homer.relationWith(marge).addChild('Lisa', 'F');
    maggie = homer.relationWith(marge).addChild('Maggie', 'F');
    _ref = homer.addParents('Abraham', 'Mona'), abraham = _ref[0], mona = _ref[1];
    _ref1 = marge.addParents('Clancy', 'Jackie'), clancy = _ref1[0], jackie = _ref1[1];
    herb = abraham.relationWith(mona).addChild('Herb', 'M');
    patty = clancy.relationWith(jackie).addChild('Patty', 'F');
    selma = clancy.relationWith(jackie).addChild('Selma', 'F');
    fatherOfLing = selma.addPartner('Father of Ling');
    return ling = selma.relationWith(fatherOfLing).addChild('Ling', 'F');
  });

}).call(this);
