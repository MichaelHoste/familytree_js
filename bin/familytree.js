// Generated by CoffeeScript 1.6.3
(function() {
  var Person, Relation;

  $(function() {
    var abraham, bart, clancy, fatherOfLing, herb, homer, jackie, ling, lisa, maggie, marge, mona, patty, selma, _ref, _ref1;
    homer = new Person('Homer', 'M');
    marge = homer.addPartner('Marge');
    bart = homer.relationWith(marge).addChild('Bart', 'M');
    lisa = homer.relationWith(marge).addChild('Lisa', 'F');
    maggie = homer.relationWith(marge).addChild('Maggie', 'F');
    _ref = homer.addParents('Abraham', 'Mona'), abraham = _ref[0], mona = _ref[1];
    _ref1 = marge.addParents('Clancy', 'Jackie'), clancy = _ref1[0], jackie = _ref1[1];
    herb = abraham.relationWith(mona).addChild('Herb', 'M');
    patty = clancy.relationWith(jackie).addChild('Patty', 'F');
    selma = clancy.relationWith(jackie).addChild('Selma', 'F');
    fatherOfLing = selma.addPartner('Father of Ling');
    ling = selma.relationWith(fatherOfLing).addChild('Ling', 'F');
    console.log(bart);
    console.log(bart.cousins());
    console.log(bart.parentsSiblings());
    return console.log(homer.partners());
  });

  Person = (function() {
    function Person(name, sex) {
      this.name = name;
      this.sex = sex;
      this.parentRelation = void 0;
      this.partnerRelations = [];
    }

    Person.prototype.partners = function() {
      var _this = this;
      return _.collect(this.partnerRelations, function(relation) {
        return relation[_this.sex === 'M' ? 'wife' : 'husband'];
      });
    };

    Person.prototype.children = function() {
      return _.flatten(_.collect(this.partnerRelations, function(partnerRelation) {
        return partnerRelation.children;
      }));
    };

    Person.prototype.mother = function() {
      return this.parentRelation.wife;
    };

    Person.prototype.father = function() {
      return this.parentRelation.husband;
    };

    Person.prototype.parents = function() {
      return [this.father(), this.mother()];
    };

    Person.prototype.siblings = function() {
      return _.difference(this.parentRelation.children, [this]);
    };

    Person.prototype.parentsSiblings = function() {
      return this.father().siblings().concat(this.mother().siblings());
    };

    Person.prototype.cousins = function() {
      return _.flatten(_.collect(this.parentsSiblings(), function(sibling) {
        return sibling.children();
      }));
    };

    Person.prototype.relationWith = function(person) {
      var _this = this;
      return _.find(this.partnerRelations, function(relation) {
        return (_this.sex === 'M' && relation.wife === person) || (_this.sex === 'F' && relation.husband === person);
      });
    };

    Person.prototype.addParents = function(father_name, mother_name) {
      if (father_name == null) {
        father_name = void 0;
      }
      if (mother_name == null) {
        mother_name = void 0;
      }
      father_name = father_name ? father_name : "Father of " + this.name;
      mother_name = mother_name ? mother_name : "Mother of " + this.name;
      this.parentRelation = new Relation();
      this.parentRelation.children.push(this);
      this.parentRelation.husband = new Person(father_name, 'M');
      this.parentRelation.wife = new Person(mother_name, 'F');
      this.parentRelation.husband.partnerRelations.push(this.parentRelation);
      this.parentRelation.wife.partnerRelations.push(this.parentRelation);
      return [this.parentRelation.husband, this.parentRelation.wife];
    };

    Person.prototype.addPartner = function(name) {
      var husband_name, relation, wife_name;
      if (name == null) {
        name = void 0;
      }
      relation = new Relation();
      if (this.sex === 'M') {
        relation.husband = this;
        wife_name = name ? name : "Wife of " + this.name;
        relation.wife = new Person(wife_name, 'F');
        relation.wife.partnerRelations.push(relation);
        this.partnerRelations.push(relation);
        return relation.wife;
      } else {
        relation.wife = this;
        husband_name = name ? name : "Husband of " + this.name;
        relation.husband = new Person(husband_name, 'M');
        relation.husband.partnerRelations.push(relation);
        this.partnerRelations.push(relation);
        return relation.husband;
      }
    };

    return Person;

  })();

  Relation = (function() {
    function Relation() {
      this.husband = void 0;
      this.wife = void 0;
      this.children = [];
    }

    Relation.prototype.addChild = function(name, sex) {
      var child;
      child = new Person(name, sex);
      child.parentRelation = this;
      this.children.push(child);
      return child;
    };

    return Relation;

  })();

}).call(this);
